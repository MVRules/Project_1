name: Receive Task & Build/Deploy

on:
  repository_dispatch:
    types: [build_task, revise_task]
  workflow_dispatch:
    inputs:
      email:
        description: "Student email"
        required: true
      secret:
        description: "Your BUILD_SECRET (must match repo secret)"
        required: true
      task:
        description: "Task ID"
        required: true
      round:
        description: "Round number"
        required: true
        default: "1"
      nonce:
        description: "Nonce (any unique string)"
        required: true
        default: "manual"
      brief:
        description: "Brief"
        required: true
        default: "Build a minimal page"
      evaluation_url:
        description: "Evaluator dispatch URL"
        required: true
        default: "https://api.github.com/repos/MVRules/Project_1/dispatches"

permissions:
  contents: write
  pages: write
  id-token: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # If manual run: build request.json from the form inputs
      - name: If manual run, create request.json
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          cat > request.json <<JSON
          {
            "email": "${{ github.event.inputs.email }}",
            "secret": "${{ github.event.inputs.secret }}",
            "task": "${{ github.event.inputs.task }}",
            "round": ${{ github.event.inputs.round }},
            "nonce": "${{ github.event.inputs.nonce }}",
            "evaluation_url": "${{ github.event.inputs.evaluation_url }}",
            "brief": "${{ github.event.inputs.brief }}",
            "checks": ["Repo has MIT license","README.md is professional"]
          }
          JSON
          cat request.json

      # If dispatched by instructor: save payload
      - name: If repository_dispatch, save request.json
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > request.json
          cat request.json

      - name: Verify secret
        run: |
          REQ_SECRET=$(jq -r '.secret // empty' request.json)
          if [ -z "$REQ_SECRET" ]; then
            echo "❌ Missing 'secret' in request.json"
            exit 1
          fi
          REQ_CLEAN=$(printf "%s" "$REQ_SECRET" | tr -d '\r' | awk '{$1=$1};1')
          ACT_CLEAN=$(printf "%s" "${{ secrets.BUILD_SECRET }}" | tr -d '\r' | awk '{$1=$1};1')
          if [ "$REQ_CLEAN" != "$ACT_CLEAN" ]; then
            echo "❌ Secret mismatch"
            exit 1
          fi
          echo "✅ Secret OK"

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Install OpenAI client
        run: npm i openai@^4.0.0

      - name: Generate app
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/generate.js

      - name: Commit & push
        run: |
          git config user.name "github-actions"
          git config user.email "action@github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No changes"
          else
            ROUND=$(jq -r '.round' request.json)
            git commit -m "Auto generate for round ${ROUND}"
            git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:main
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          publish_branch: gh-pages
          user_name: github-actions
          user_email: action@github.com

      - name: Notify evaluator (dispatch to same repo)
        run: |
          EVAL_URL=$(jq -r '.evaluation_url' request.json)
          EMAIL=$(jq -r '.email' request.json)
          TASK=$(jq -r '.task' request.json)
          ROUND=$(jq -r '.round' request.json)
          NONCE=$(jq -r '.nonce' request.json)
          REPO_URL="https://github.com/${{ github.repository }}"
          COMMIT_SHA=$(git rev-parse HEAD)
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

          PAYLOAD=$(jq -n \
            --arg et "evaluate_submission" \
            --arg email "$EMAIL" \
            --arg task "$TASK" \
            --argjson round "$ROUND" \
            --arg nonce "$NONCE" \
            --arg repo "$REPO_URL" \
            --arg sha "$COMMIT_SHA" \
            --arg pages "$PAGES_URL" \
            '{event_type: $et, client_payload: {email: $email, task: $task, round: $round, nonce: $nonce, repo_url: $repo, commit_sha: $sha, pages_url: $pages}}')

          echo "$PAYLOAD" | jq .

          HTTP_CODE=$(curl -s -o /dev/stderr -w "%{http_code}" \
            -X POST \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" "$EVAL_URL" || echo "000")
          echo "HTTP code: $HTTP_CODE"
          if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "Evaluator accepted dispatch."
          else
            echo "Evaluator did not accept dispatch."
            exit 1
          fi
