name: Receive Task & Build/Deploy

on:
  repository_dispatch:
    types: [build_task, revise_task]
  workflow_dispatch: {}  # allows manual test

permissions:
  contents: write
  pages: write
  id-token: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: If manual run, create request.json
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          cat > request.json <<'JSON'
          {
            "email": "you@example.com",
            "secret": "REPLACE_WITH_YOUR_BUILD_SECRET",
            "task": "quizlet-001",
            "round": 1,
            "nonce": "manual",
            "evaluation_url": "https://api.github.com/repos/MVRules/Project_1/dispatches",
            "brief": "Build a minimal page",
            "checks": ["Repo has MIT license","README.md is professional"]
          }
          JSON
          cat request.json

      - name: Save request (dispatch path)
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > request.json
          cat request.json

      - name: Verify secret
        run: |
          REQ_SECRET=$(jq -r '.secret' request.json)
          if [ "$REQ_SECRET" != "${{ secrets.BUILD_SECRET }}" ]; then
            echo "❌ Secret mismatch"
            exit 1
          fi
          echo "✅ Secret OK"

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Install OpenAI client
        run: npm i openai@^4.0.0

      - name: Generate app
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/generate.js

      - name: Commit & push
        run: |
          git config user.name "github-actions"
          git config user.email "action@github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No changes"
          else
            ROUND=$(jq -r '.round' request.json)
            git commit -m "Auto generate for round ${ROUND}"
            git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:main
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          publish_branch: gh-pages
          user_name: github-actions
          user_email: action@github.com

      - name: Notify evaluator (dispatch back to same repo)
        env:
          EVAL_URL: https://api.github.com/repos/MVRules/Project_1/dispatches
        run: |
          EMAIL=$(jq -r '.email' request.json)
          TASK=$(jq -r '.task' request.json)
          ROUND=$(jq -r '.round' request.json)
          NONCE=$(jq -r '.nonce' request.json)
          REPO_URL="https://github.com/${{ github.repository }}"
          COMMIT_SHA=$(git rev-parse HEAD)
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

          PAYLOAD=$(jq -n \
            --arg et "evaluate_submission" \
            --arg email "$EMAIL" \
            --arg task "$TASK" \
            --argjson round "$ROUND" \
            --arg nonce "$NONCE" \
            --arg repo "$REPO_URL" \
            --arg sha "$COMMIT_SHA" \
            --arg pages "$PAGES_URL" \
            '{event_type: $et, client_payload: {email: $email, task: $task, round: $round, nonce: $nonce, repo_url: $repo, commit_sha: $sha, pages_url: $pages}}')

          echo "$PAYLOAD" | jq .

          # Same repo → can use the workflow token
          ATTEMPTS=5
          DELAY=1
          i=1
          while [ $i -le $ATTEMPTS ]; do
            echo "Attempt $i to POST to $EVAL_URL"
            HTTP_CODE=$(curl -s -o /dev/stderr -w "%{http_code}" \
              -X POST \
              -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" "$EVAL_URL" || echo "000")
            echo "HTTP code: $HTTP_CODE"
            if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
              echo "Evaluator accepted dispatch."
              exit 0
            fi
            echo "Not accepted. Sleeping $DELAY s…"
            sleep $DELAY
            DELAY=$((DELAY * 2))
            i=$((i + 1))
          done

          echo "Failed to notify evaluator after $ATTEMPTS attempts."
          exit 1
